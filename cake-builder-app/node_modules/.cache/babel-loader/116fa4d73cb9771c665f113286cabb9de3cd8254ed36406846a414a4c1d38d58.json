{"ast":null,"code":"var _jsxFileName = \"D:\\\\M\\xF4n h\\u1ECDc\\\\C\\xF4ng ngh\\u1EC7 Java\\\\cake-builder-app\\\\src\\\\components\\\\CakeCanvas.js\";\n// import React, { forwardRef } from 'react'; // Import forwardRef\n// import './CakeCanvas.css';\n// import Layer from './Layer';\n\n// const CANVAS_WIDTH = 300;\n// const CANVAS_HEIGHT = 300;\n// // Vị trí gốc cho lớp bánh đầu tiên (hình dạng/màu sắc cơ bản)\n// // Đặt BASE_X và BASE_Y để hình ảnh 100x100px được căn giữa trong canvas 300x300px\n// // (300 / 2) - (100 / 2) = 150 - 50 = 100\n// const BASE_X = CANVAS_WIDTH / 2;\n// const BASE_Y = CANVAS_HEIGHT / 2 + 50; // Điều chỉnh vị trí trung tâm theo chiều dọc để bánh không quá cao\n\n// // Sử dụng forwardRef để có thể truyền ref từ component cha (App.js)\n// // forwardRef nhận một hàm component, và hàm này sẽ nhận props và ref như các đối số\n// const CakeCanvas = forwardRef(({ layers, numLayers, onDrop }, ref) => { // Thêm ref vào đối số\n//     return (\n//         <div\n//             className=\"cake-canvas\"\n//             style={{ width: `${CANVAS_WIDTH}px`, height: `${CANVAS_HEIGHT}px` }}\n//             ref={ref} // Gán ref vào div canvas\n//             onDrop={onDrop} // Gán sự kiện onDrop từ props\n//             onDragOver={(e) => e.preventDefault()} // Ngăn chặn hành vi mặc định để cho phép thả\n//         >\n//             {layers.map((layer, index) => {\n//                 // Khởi tạo vị trí và kích thước mặc định cho mỗi lớp là 100x100px\n//                 // x, y là góc trên bên trái của hình ảnh 100x100px, được căn giữa tại BASE_X, BASE_Y\n//                 let x = BASE_X - 50; // 50 là một nửa chiều rộng/cao mặc định (100px)\n//                 let y = BASE_Y - 50;\n//                 let width = 100;\n//                 let height = 100;\n//                 let zIndex = index + 1; // Đảm bảo các lớp mới hơn nằm trên các lớp cũ hơn\n\n//                 switch (layer.type) {\n//                     case 'shape':\n//                     case 'base':\n//                     case 'midCream':\n//                         // Các lớp này giữ nguyên kích thước 100x100px\n//                         // Vị trí được điều chỉnh tương ứng với lớp dưới\n//                         if (layer.type === 'midCream') {\n//                             y -= 22.6;\n//                         }\n//                         break;\n//                     case 'topColorSecondLayer':\n//                         // Màu sắc tầng 2: giảm kích thước xuống 80% và dịch chuyển theo yêu cầu\n//                         width *= 0.8;\n//                         height *= 0.8;\n//                         x += 37.6;\n//                         y -= 61.9;\n//                         break;\n//                     case 'topCream':\n//                         // Kem phủ: vị trí và kích thước khác nhau tùy thuộc vào số tầng\n//                         if (numLayers === 1) {\n//                             // Bánh 1 tầng: giữ nguyên 100x100px, dịch lên trên 22.6px\n//                             y -= 22.6;\n//                         } else if (numLayers === 2) {\n//                             // Bánh 2 tầng: giảm kích thước xuống 80% và dịch chuyển theo yêu cầu\n//                             width *= 0.8;\n//                             height *= 0.8;\n//                             x += 37.6;\n//                             y -= 61.9;\n//                         }\n//                         break;\n//                     case 'sugar':\n//                         // Đường mịn: vị trí và kích thước khác nhau tùy thuộc vào số tầng\n//                         if (numLayers === 1) {\n//                             // Bánh 1 tầng: giữ nguyên 100x100px, dịch lên trên 22.6px\n//                             y -= 22.6;\n//                         } else if (numLayers === 2) {\n//                             // Bánh 2 tầng: giảm kích thước xuống 80% và dịch chuyển theo yêu cầu\n//                             width *= 0.8;\n//                             height *= 0.8;\n//                             x += 37.6;\n//                             y -= 61.9;\n//                         }\n//                         break;\n//                     default:\n//                         break;\n//                 }\n\n//                 return (\n//                     <Layer\n//                         key={layer.type} // Sử dụng layer.type làm key để đảm bảo cập nhật đúng\n//                         src={layer.src}\n//                         alt={layer.type}\n//                         style={{\n//                             position: 'absolute',\n//                             left: `${x}px`,\n//                             top: `${y}px`,\n//                             width: `${width}px`,\n//                             height: `${height}px`,\n//                             zIndex: zIndex,\n//                         }}\n//                     />\n//                 );\n//             })}\n//         </div>\n//     );\n// });\n\n// export default CakeCanvas;\nimport React, { forwardRef } from 'react'; // Import forwardRef\nimport './CakeCanvas.css';\nimport Layer from './Layer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CANVAS_WIDTH = 300;\nconst CANVAS_HEIGHT = 300;\n// Định nghĩa tâm của khu vực hiển thị bánh trên canvas\nconst BASE_X_CENTER = CANVAS_WIDTH / 2;\nconst BASE_Y_CENTER = CANVAS_HEIGHT / 2 + 50; // Điều chỉnh vị trí trung tâm theo chiều dọc\n\n// Sử dụng forwardRef để có thể truyền ref từ component cha (App.js)\nconst CakeCanvas = /*#__PURE__*/forwardRef(_c = ({\n  layers,\n  numLayers,\n  onDrop\n}, ref) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cake-canvas\",\n    style: {\n      width: `${CANVAS_WIDTH}px`,\n      height: `${CANVAS_HEIGHT}px`\n    },\n    ref: ref // Gán ref vào div canvas\n    ,\n    onDrop: onDrop // Gán sự kiện onDrop từ props\n    ,\n    onDragOver: e => e.preventDefault() // Ngăn chặn hành vi mặc định để cho phép thả\n    ,\n    children: layers.map((layer, index) => {\n      let currentWidth = 100; // Kích thước mặc định cho tất cả các lớp\n      let currentHeight = 100; // Kích thước mặc định cho tất cả các lớp\n      let offsetX = 0; // Offset thêm vào vị trí X\n      let offsetY = 0; // Offset thêm vào vị trí Y\n\n      // Bước 1: Xác định kích thước thực tế của lớp hiện tại (100% hoặc 80%)\n      if (layer.type === 'topColorSecondLayer' || layer.type === 'topCream' && numLayers === 2 || layer.type === 'sugar' && numLayers === 2) {\n        currentWidth *= 0.8;\n        currentHeight *= 0.8;\n      }\n\n      // Bước 2: Tính toán vị trí góc trên bên trái ban đầu để căn giữa hình ảnh\n      // dựa trên kích thước hiện tại của nó (currentWidth, currentHeight)\n      let x = BASE_X_CENTER - currentWidth / 2;\n      let y = BASE_Y_CENTER - currentHeight / 2;\n\n      // Bước 3: Áp dụng các offset cụ thể mà bạn đã cung cấp\n      switch (layer.type) {\n        case 'midCream':\n          offsetY -= 22.6;\n          break;\n        case 'topColorSecondLayer':\n          offsetX += 37.6;\n          offsetY -= 61.9;\n          break;\n        case 'topCream':\n          if (numLayers === 1) {\n            offsetY -= 22.6;\n          } else if (numLayers === 2) {\n            offsetX += 37.6;\n            offsetY -= 61.9;\n          }\n          break;\n        case 'sugar':\n          if (numLayers === 1) {\n            offsetY -= 22.6;\n          } else if (numLayers === 2) {\n            offsetX += 37.6;\n            offsetY -= 61.9;\n          }\n          break;\n        default:\n          break;\n      }\n\n      // Bước 4: Áp dụng tổng các offset vào vị trí cuối cùng\n      x += offsetX;\n      y += offsetY;\n      let zIndex = index + 1; // Đảm bảo các lớp mới hơn nằm trên các lớp cũ hơn\n\n      return /*#__PURE__*/_jsxDEV(Layer, {\n        // Sử dụng layer.type làm key để đảm bảo cập nhật đúng\n        src: layer.src,\n        alt: layer.type,\n        style: {\n          position: 'absolute',\n          left: `${x}px`,\n          top: `${y}px`,\n          width: `${currentWidth}px`,\n          height: `${currentHeight}px`,\n          zIndex: zIndex\n        }\n      }, layer.type, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n});\n_c2 = CakeCanvas;\nexport default CakeCanvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"CakeCanvas$forwardRef\");\n$RefreshReg$(_c2, \"CakeCanvas\");","map":{"version":3,"names":["React","forwardRef","Layer","jsxDEV","_jsxDEV","CANVAS_WIDTH","CANVAS_HEIGHT","BASE_X_CENTER","BASE_Y_CENTER","CakeCanvas","_c","layers","numLayers","onDrop","ref","className","style","width","height","onDragOver","e","preventDefault","children","map","layer","index","currentWidth","currentHeight","offsetX","offsetY","type","x","y","zIndex","src","alt","position","left","top","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["D:/Môn học/Công nghệ Java/cake-builder-app/src/components/CakeCanvas.js"],"sourcesContent":["// import React, { forwardRef } from 'react'; // Import forwardRef\r\n// import './CakeCanvas.css';\r\n// import Layer from './Layer';\r\n\r\n// const CANVAS_WIDTH = 300;\r\n// const CANVAS_HEIGHT = 300;\r\n// // Vị trí gốc cho lớp bánh đầu tiên (hình dạng/màu sắc cơ bản)\r\n// // Đặt BASE_X và BASE_Y để hình ảnh 100x100px được căn giữa trong canvas 300x300px\r\n// // (300 / 2) - (100 / 2) = 150 - 50 = 100\r\n// const BASE_X = CANVAS_WIDTH / 2;\r\n// const BASE_Y = CANVAS_HEIGHT / 2 + 50; // Điều chỉnh vị trí trung tâm theo chiều dọc để bánh không quá cao\r\n\r\n// // Sử dụng forwardRef để có thể truyền ref từ component cha (App.js)\r\n// // forwardRef nhận một hàm component, và hàm này sẽ nhận props và ref như các đối số\r\n// const CakeCanvas = forwardRef(({ layers, numLayers, onDrop }, ref) => { // Thêm ref vào đối số\r\n//     return (\r\n//         <div\r\n//             className=\"cake-canvas\"\r\n//             style={{ width: `${CANVAS_WIDTH}px`, height: `${CANVAS_HEIGHT}px` }}\r\n//             ref={ref} // Gán ref vào div canvas\r\n//             onDrop={onDrop} // Gán sự kiện onDrop từ props\r\n//             onDragOver={(e) => e.preventDefault()} // Ngăn chặn hành vi mặc định để cho phép thả\r\n//         >\r\n//             {layers.map((layer, index) => {\r\n//                 // Khởi tạo vị trí và kích thước mặc định cho mỗi lớp là 100x100px\r\n//                 // x, y là góc trên bên trái của hình ảnh 100x100px, được căn giữa tại BASE_X, BASE_Y\r\n//                 let x = BASE_X - 50; // 50 là một nửa chiều rộng/cao mặc định (100px)\r\n//                 let y = BASE_Y - 50;\r\n//                 let width = 100;\r\n//                 let height = 100;\r\n//                 let zIndex = index + 1; // Đảm bảo các lớp mới hơn nằm trên các lớp cũ hơn\r\n\r\n//                 switch (layer.type) {\r\n//                     case 'shape':\r\n//                     case 'base':\r\n//                     case 'midCream':\r\n//                         // Các lớp này giữ nguyên kích thước 100x100px\r\n//                         // Vị trí được điều chỉnh tương ứng với lớp dưới\r\n//                         if (layer.type === 'midCream') {\r\n//                             y -= 22.6;\r\n//                         }\r\n//                         break;\r\n//                     case 'topColorSecondLayer':\r\n//                         // Màu sắc tầng 2: giảm kích thước xuống 80% và dịch chuyển theo yêu cầu\r\n//                         width *= 0.8;\r\n//                         height *= 0.8;\r\n//                         x += 37.6;\r\n//                         y -= 61.9;\r\n//                         break;\r\n//                     case 'topCream':\r\n//                         // Kem phủ: vị trí và kích thước khác nhau tùy thuộc vào số tầng\r\n//                         if (numLayers === 1) {\r\n//                             // Bánh 1 tầng: giữ nguyên 100x100px, dịch lên trên 22.6px\r\n//                             y -= 22.6;\r\n//                         } else if (numLayers === 2) {\r\n//                             // Bánh 2 tầng: giảm kích thước xuống 80% và dịch chuyển theo yêu cầu\r\n//                             width *= 0.8;\r\n//                             height *= 0.8;\r\n//                             x += 37.6;\r\n//                             y -= 61.9;\r\n//                         }\r\n//                         break;\r\n//                     case 'sugar':\r\n//                         // Đường mịn: vị trí và kích thước khác nhau tùy thuộc vào số tầng\r\n//                         if (numLayers === 1) {\r\n//                             // Bánh 1 tầng: giữ nguyên 100x100px, dịch lên trên 22.6px\r\n//                             y -= 22.6;\r\n//                         } else if (numLayers === 2) {\r\n//                             // Bánh 2 tầng: giảm kích thước xuống 80% và dịch chuyển theo yêu cầu\r\n//                             width *= 0.8;\r\n//                             height *= 0.8;\r\n//                             x += 37.6;\r\n//                             y -= 61.9;\r\n//                         }\r\n//                         break;\r\n//                     default:\r\n//                         break;\r\n//                 }\r\n\r\n//                 return (\r\n//                     <Layer\r\n//                         key={layer.type} // Sử dụng layer.type làm key để đảm bảo cập nhật đúng\r\n//                         src={layer.src}\r\n//                         alt={layer.type}\r\n//                         style={{\r\n//                             position: 'absolute',\r\n//                             left: `${x}px`,\r\n//                             top: `${y}px`,\r\n//                             width: `${width}px`,\r\n//                             height: `${height}px`,\r\n//                             zIndex: zIndex,\r\n//                         }}\r\n//                     />\r\n//                 );\r\n//             })}\r\n//         </div>\r\n//     );\r\n// });\r\n\r\n// export default CakeCanvas;\r\nimport React, { forwardRef } from 'react'; // Import forwardRef\r\nimport './CakeCanvas.css';\r\nimport Layer from './Layer';\r\n\r\nconst CANVAS_WIDTH = 300;\r\nconst CANVAS_HEIGHT = 300;\r\n// Định nghĩa tâm của khu vực hiển thị bánh trên canvas\r\nconst BASE_X_CENTER = CANVAS_WIDTH / 2;\r\nconst BASE_Y_CENTER = CANVAS_HEIGHT / 2 + 50; // Điều chỉnh vị trí trung tâm theo chiều dọc\r\n\r\n// Sử dụng forwardRef để có thể truyền ref từ component cha (App.js)\r\nconst CakeCanvas = forwardRef(({ layers, numLayers, onDrop }, ref) => {\r\n    return (\r\n        <div\r\n            className=\"cake-canvas\"\r\n            style={{ width: `${CANVAS_WIDTH}px`, height: `${CANVAS_HEIGHT}px` }}\r\n            ref={ref} // Gán ref vào div canvas\r\n            onDrop={onDrop} // Gán sự kiện onDrop từ props\r\n            onDragOver={(e) => e.preventDefault()} // Ngăn chặn hành vi mặc định để cho phép thả\r\n        >\r\n            {layers.map((layer, index) => {\r\n                let currentWidth = 100; // Kích thước mặc định cho tất cả các lớp\r\n                let currentHeight = 100; // Kích thước mặc định cho tất cả các lớp\r\n                let offsetX = 0; // Offset thêm vào vị trí X\r\n                let offsetY = 0; // Offset thêm vào vị trí Y\r\n\r\n                // Bước 1: Xác định kích thước thực tế của lớp hiện tại (100% hoặc 80%)\r\n                if (\r\n                    layer.type === 'topColorSecondLayer' ||\r\n                    (layer.type === 'topCream' && numLayers === 2) ||\r\n                    (layer.type === 'sugar' && numLayers === 2)\r\n                ) {\r\n                    currentWidth *= 0.8;\r\n                    currentHeight *= 0.8;\r\n                }\r\n\r\n                // Bước 2: Tính toán vị trí góc trên bên trái ban đầu để căn giữa hình ảnh\r\n                // dựa trên kích thước hiện tại của nó (currentWidth, currentHeight)\r\n                let x = BASE_X_CENTER - (currentWidth / 2);\r\n                let y = BASE_Y_CENTER - (currentHeight / 2);\r\n\r\n                // Bước 3: Áp dụng các offset cụ thể mà bạn đã cung cấp\r\n                switch (layer.type) {\r\n                    case 'midCream':\r\n                        offsetY -= 22.6;\r\n                        break;\r\n                    case 'topColorSecondLayer':\r\n                        offsetX += 37.6;\r\n                        offsetY -= 61.9;\r\n                        break;\r\n                    case 'topCream':\r\n                        if (numLayers === 1) {\r\n                            offsetY -= 22.6;\r\n                        } else if (numLayers === 2) {\r\n                            offsetX += 37.6;\r\n                            offsetY -= 61.9;\r\n                        }\r\n                        break;\r\n                    case 'sugar':\r\n                        if (numLayers === 1) {\r\n                            offsetY -= 22.6;\r\n                        } else if (numLayers === 2) {\r\n                            offsetX += 37.6;\r\n                            offsetY -= 61.9;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n\r\n                // Bước 4: Áp dụng tổng các offset vào vị trí cuối cùng\r\n                x += offsetX;\r\n                y += offsetY;\r\n\r\n                let zIndex = index + 1; // Đảm bảo các lớp mới hơn nằm trên các lớp cũ hơn\r\n\r\n                return (\r\n                    <Layer\r\n                        key={layer.type} // Sử dụng layer.type làm key để đảm bảo cập nhật đúng\r\n                        src={layer.src}\r\n                        alt={layer.type}\r\n                        style={{\r\n                            position: 'absolute',\r\n                            left: `${x}px`,\r\n                            top: `${y}px`,\r\n                            width: `${currentWidth}px`,\r\n                            height: `${currentHeight}px`,\r\n                            zIndex: zIndex,\r\n                        }}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default CakeCanvas;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}